# vfs_demo

`vfs_demo` is a graphical application developed using the Qt framework. The application simulates a virtual file system (VFS) and provides a user interface to manage files within this system. Users can add, delete, and print the contents of text files in a tree structure, representing the file hierarchy.

## Features

- **Add Files**: Users can add new text files to the virtual file system.
- **Delete Files**: Users can delete existing text files from the virtual file system.
- **Print Files**: Users can display the contents of a selected text file.

## Screenshots

![vfs_demo Screenshot](path/to/screenshot.png)

## Installation

### Prerequisites

- Qt 5.x or later
- Qt Creator (optional, for development)

### Clone the Repository

```bash
git clone https://github.com/username/vfs_demo.git
cd vfs_demo
```

### Build and Run

#### Using Qt Creator

1. Open `vfs_demo.pro` in Qt Creator.
2. Configure the project if prompted.
3. Click the "Build" button to compile the project.
4. Click the "Run" button to launch the application.

#### Using Command Line

1. Navigate to the project directory.
2. Run the following commands:

```bash
mkdir build
cd build
qmake ..
make
./virtualFileSystem
```

## Usage

### Adding a File

1. Enter the file name in the "Add File" text box.
2. Click the "Add" button to add the file to the selected directory in the tree view.

### Deleting a File

1. Select the file in the tree view.
2. Click the "Delete" button to remove the file from the virtual file system.

### Printing a File

1. Select the file in the tree view.
2. Click the "Print" button to display the contents of the file in the "Print" text box.

## Project Structure

- `mainwindow.h` and `mainwindow.cpp`: Define and implement the main window and its functionalities.
- `file_system.h` and `file_system.cpp`: Define and implement the structure and operations of the virtual file system.
- `ui_mainwindow.h`: Generated by Qt Designer, contains UI components.
- `resource.qrc`: Resource file for including icons and other resources in the application.

## Code Overview

### main.cpp

The entry point of the application, which initializes the `QApplication` and shows the `MainWindow`.

### mainwindow.h and mainwindow.cpp

Define and implement the `MainWindow` class, including slots for handling button clicks and methods for managing the virtual file system.

### file_system.h and file_system.cpp

Define and implement data structures and methods for representing the virtual file system.

### mainwindow.ui

Defines the layout and components of the main window, created using Qt Designer.

### resource.qrc

Specifies resources used in the application, such as icons.

## License

This project is licensed under the MIT License. See the LICENSE file for details.